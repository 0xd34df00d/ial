-- mathematical integers; see int.agda for imported machine integers from Haskell.
module integer where

open import bool
open import bool-thms2
open import eq
open import nat
open import nat-thms
open import product
open import product-thms
open import sum
open import unit

‚Ñ§-pos-t : nat ‚Üí Set
‚Ñ§-pos-t 0 = ‚ä§
‚Ñ§-pos-t (suc _) = ùîπ

{- In mk‚Ñ§ n a, the argument a tells whether the integer is positive or negative, if n is nonzero.
   If n is zero, then a is just triv : ‚ä§, so there is a unique integer value for 0. -}
data ‚Ñ§ : Set where
  mk‚Ñ§ : (n : nat) ‚Üí ‚Ñ§-pos-t n ‚Üí ‚Ñ§

0‚Ñ§ : ‚Ñ§
0‚Ñ§ = mk‚Ñ§ 0 triv

1‚Ñ§ : ‚Ñ§
1‚Ñ§ = mk‚Ñ§ 1 tt

-1‚Ñ§ : ‚Ñ§
-1‚Ñ§ = mk‚Ñ§ 1 ff

{- subtract the second natural number from the first, returning an integer.
   This is mostly a helper for _+‚Ñ§_ -}
diff‚Ñ§ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñ§
diff‚Ñ§ n m with ‚Ñï-trichotomy n m 
diff‚Ñ§ n m | inj‚ÇÅ p with <‚à∏suc{m}{n} p               -- n < m
diff‚Ñ§ n m | inj‚ÇÅ p | x , _ = mk‚Ñ§ (suc x) ff
diff‚Ñ§ n m | inj‚ÇÇ (inj‚ÇÅ p) = mk‚Ñ§ 0 triv              -- n = m 
diff‚Ñ§ n m | inj‚ÇÇ (inj‚ÇÇ p) with <‚à∏suc{n}{m} p
diff‚Ñ§ n m | inj‚ÇÇ (inj‚ÇÇ p) | x , _ = mk‚Ñ§ (suc x) tt  -- m < n 

_+‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
(mk‚Ñ§ 0 _) +‚Ñ§ x = x
x +‚Ñ§ (mk‚Ñ§ 0 _) = x
(mk‚Ñ§ (suc n) tt) +‚Ñ§ (mk‚Ñ§ (suc m) tt) = mk‚Ñ§ (suc n + suc m) tt
(mk‚Ñ§ (suc n) tt) +‚Ñ§ (mk‚Ñ§ (suc m) ff) = diff‚Ñ§ n m 
(mk‚Ñ§ (suc n) ff) +‚Ñ§ (mk‚Ñ§ (suc m) tt) = diff‚Ñ§ m n 
(mk‚Ñ§ (suc n) ff) +‚Ñ§ (mk‚Ñ§ (suc m) ff) = mk‚Ñ§ (suc n + suc m) ff

test-+‚Ñ§1 : (mk‚Ñ§ 2 ff) +‚Ñ§ (mk‚Ñ§ 4 tt) ‚â° (mk‚Ñ§ 2 tt)
test-+‚Ñ§1 = refl

test-+‚Ñ§2 : (mk‚Ñ§ 2 tt) +‚Ñ§ (mk‚Ñ§ 4 ff) ‚â° (mk‚Ñ§ 2 ff)
test-+‚Ñ§2 = refl

_‚â§‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùîπ
(mk‚Ñ§ 0 triv) ‚â§‚Ñ§ (mk‚Ñ§ 0 triv) = tt
(mk‚Ñ§ 0 triv) ‚â§‚Ñ§ (mk‚Ñ§ (suc _) pos) = pos
(mk‚Ñ§ (suc _) pos) ‚â§‚Ñ§ (mk‚Ñ§ 0 triv) = ~ pos
(mk‚Ñ§ (suc x) pos1) ‚â§‚Ñ§ (mk‚Ñ§ (suc y) pos2) with pos1 xor pos2
(mk‚Ñ§ (suc x) pos1) ‚â§‚Ñ§ (mk‚Ñ§ (suc y) pos2) | tt = pos1 imp pos2
(mk‚Ñ§ (suc x) pos1) ‚â§‚Ñ§ (mk‚Ñ§ (suc y) pos2) | ff = if pos1 then x ‚â§ y else y ‚â§ x

{-
‚â§‚Ñ§-antisymm : ‚àÄ(x y : ‚Ñ§) ‚Üí x ‚â§‚Ñ§ y ‚â° tt ‚Üí y ‚â§‚Ñ§ x ‚â° tt ‚Üí x ‚â° y
‚â§‚Ñ§-antisymm (mk‚Ñ§ zero triv) (mk‚Ñ§ zero triv) p q = refl
‚â§‚Ñ§-antisymm (mk‚Ñ§ zero triv) (mk‚Ñ§ (suc y) pos2) p q rewrite p with q 
‚â§‚Ñ§-antisymm (mk‚Ñ§ zero triv) (mk‚Ñ§ (suc y) pos2) p q | ()
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ zero triv) p q rewrite q with p
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ zero triv) p q | ()
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ (suc y) pos2) p q with keep (pos1 xor pos2)
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ (suc y) pos2) p q | tt , rp rewrite rp | xor-comm pos1 pos2 | rp with imp-antisymm{pos1} p q 
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ (suc y) pos2) p q | tt , rp | pp rewrite pp | xor-anti-idem pos2 with rp
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ (suc y) pos2) p q | tt , rp | pp | ()
‚â§‚Ñ§-antisymm (mk‚Ñ§ (suc x) pos1) (mk‚Ñ§ (suc y) pos2) p q | ff , rp
 rewrite rp | xor-comm pos1 pos2 | rp | xor-‚â°{pos2}rp | ‚â§-antisym{x} p q = refl-}