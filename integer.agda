-- mathematical integers; see int.agda for imported machine integers from Haskell.
module integer where

open import bool
open import eq
open import nat
open import nat-thms
open import product
open import product-thms
open import sum
open import unit

‚Ñ§-pos-t : nat ‚Üí Set
‚Ñ§-pos-t 0 = ‚ä§
‚Ñ§-pos-t (suc n) = ùîπ

{- In mk‚Ñ§ n a, the argument a tells whether the integer is positive or negative, if n is nonzero.
   If n is zero, then a is just triv : ‚ä§, so there is a unique integer value for 0. -}
data ‚Ñ§ : Set where
  mk‚Ñ§ : (n : nat) ‚Üí ‚Ñ§-pos-t n ‚Üí ‚Ñ§

0‚Ñ§ : ‚Ñ§
0‚Ñ§ = mk‚Ñ§ 0 triv

1‚Ñ§ : ‚Ñ§
1‚Ñ§ = mk‚Ñ§ 1 tt

-1‚Ñ§ : ‚Ñ§
-1‚Ñ§ = mk‚Ñ§ 1 ff

-- helper for addition
diff‚Ñ§ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñ§
diff‚Ñ§ n m with ‚Ñï-trichotomy n m 
diff‚Ñ§ n m | inj‚ÇÅ p with <‚à∏suc{m}{n} p               -- n < m
diff‚Ñ§ n m | inj‚ÇÅ p | x , _ = mk‚Ñ§ (suc x) ff
diff‚Ñ§ n m | inj‚ÇÇ (inj‚ÇÅ p) = mk‚Ñ§ 0 triv              -- n = m 
diff‚Ñ§ n m | inj‚ÇÇ (inj‚ÇÇ p) with <‚à∏suc{n}{m} p
diff‚Ñ§ n m | inj‚ÇÇ (inj‚ÇÇ p) | x , _ = mk‚Ñ§ (suc x) tt  -- m < n 

_+‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
(mk‚Ñ§ 0 _) +‚Ñ§ x = x
x +‚Ñ§ (mk‚Ñ§ 0 _) = x
(mk‚Ñ§ (suc n) tt) +‚Ñ§ (mk‚Ñ§ (suc m) tt) = mk‚Ñ§ (suc n + suc m) tt
(mk‚Ñ§ (suc n) tt) +‚Ñ§ (mk‚Ñ§ (suc m) ff) = diff‚Ñ§ n m 
(mk‚Ñ§ (suc n) ff) +‚Ñ§ (mk‚Ñ§ (suc m) tt) = diff‚Ñ§ m n 
(mk‚Ñ§ (suc n) ff) +‚Ñ§ (mk‚Ñ§ (suc m) ff) = mk‚Ñ§ (suc n + suc m) ff

test-+‚Ñ§1 : (mk‚Ñ§ 2 ff) +‚Ñ§ (mk‚Ñ§ 4 tt) ‚â° (mk‚Ñ§ 2 tt)
test-+‚Ñ§1 = refl

test-+‚Ñ§2 : (mk‚Ñ§ 2 tt) +‚Ñ§ (mk‚Ñ§ 4 ff) ‚â° (mk‚Ñ§ 2 ff)
test-+‚Ñ§2 = refl