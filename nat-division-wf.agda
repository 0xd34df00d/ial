module nat-division-wf where

open import bool
open import bool-thms
open import eq
open import neq
open import nat
open import nat-thms
open import product
open import product-thms
open import sum
open import termination

----------------------------------------------------------------------
-- syntax
----------------------------------------------------------------------

infixl 10 _รท_!_

----------------------------------------------------------------------
-- operations
----------------------------------------------------------------------

{- a div-result for dividend x and divisor d consists of the quotient q, remainder r, and a proof that q * d + r = x -}
div-result : โ โ โ โ Set 
div-result x y = ฮฃ โ (ฮป q โ ฮฃ โ (ฮป r โ q * y + r โก x))

{-
-- this uses well-founded induction.  The approach in nat-division.agda is simpler.
div-helper : โ (x : โ) โ โ๐น _>_ x โ (y : โ) โ y =โ 0 โก ff โ div-result x y
div-helper x โx 0 () 
div-helper 0 (pfโ fx) (suc y) _ = 0 , 0 , refl
div-helper (suc x) (pfโ fx) (suc y) _ with keep (x < y) 
div-helper (suc x) (pfโ fx) (suc y) _ | tt , p = 0 , suc x , refl
div-helper (suc x) (pfโ fx) (suc y) _ | ff , p with div-helper (x โธ y) (fx (โธ<1 {x} {y})) (suc y) refl
div-helper (suc x) (pfโ fx) (suc y) _ | ff , p | q , r , u = suc q , r , {!โธeq-swap{x}{y}{q * suc y + r} (<ff p) u!}
-}


-- this uses well-founded induction.  The approach in nat-division.agda is simpler.
div-helper : โ (x : โ) โ โ๐น _>_ x โ (y : โ) โ y =โ 0 โก ff โ div-result x y
div-helper x โx 0 () 
div-helper x (pfโ fx) (suc y) _ with ๐น-dec (x =โ 0)
... | injโ u = 0 , 0 , sym (=โ-to-โก u)
... | injโ u with ๐น-dec (x < (suc y))
... | injโ v = 0 , (x , refl)
... | injโ v with (div-helper (x โธ (suc y)) (fx (โธ< {x} u)) (suc y) refl)
... | q , r , p with <ff {x} v 
... | p' with โธeq-swap{x}{suc y}{q * (suc y) + r} p' p 
... | p'' = (suc q) , (r , lem p'')
   where lem : q * (suc y) + r + suc y โก x โ suc (y + q * suc y + r) โก x
         lem p''' rewrite                        
                       +suc (q * (suc y) + r) y 
                     | +comm y (q * (suc y)) 
                     | +perm2 (q * (suc y)) r y = p'''


_รท_!_ : (x : โ) โ (y : โ) โ y =โ 0 โก ff โ div-result x y
x รท y ! p = div-helper x (โ-> x) y p

_รท_!!_ : โ โ (y : โ) โ y =โ 0 โก ff โ โ ร โ
x รท y !! p with x รท y ! p
... | q , r , p' = q , r

-- return quotient only
_รท_div_ : โ โ (y : โ) โ y =โ 0 โก ff โ โ 
x รท y div p with x รท y ! p
... | q , r , p' = q

รท< : โ {d q r x : โ} โ 1 < d โก tt โ q * d + r โก suc x โ q < suc x โก tt
รท<{0} () p
รท<{suc 0} () p
รท<{suc (suc d)}{0} u p = refl
รท<{suc (suc d)}{suc q}{r}{0} u ()
รท<{suc (suc d)}{suc q}{r}{suc x} u p with suc-inj{suc (d + q * suc (suc d) + r)}{suc x} p
... | p' rewrite sym (+suc (d + q * suc (suc d)) r) | +comm d (q * suc (suc d)) 
               | sym (+assoc (q * (suc (suc d))) d (suc r)) = รท<{suc (suc d)}{q}{d + suc r}{x} refl p'  
